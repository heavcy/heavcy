public class Linkedlist {
	
	static DNode root;
	static DNode temp;
	static DNode current;
	public void addNodes(String data){
		DNode dNode= new DNode(data);
		if (root==null){
			root=dNode;
			root.previousnode=null;
			root.nextnode=null;
		}else{
			current=root;
			while (current.nextnode!=null){
				current=current.nextnode;
			}
			current.nextnode=dNode;
			dNode.previousnode=current;
			dNode.nextnode=null;
		}
	}
	
	public void insertNodes(String data, int after){
		DNode dNode= new DNode(data);
		int ithNode=1;
		current=root;
		while (ithNode!=after){
			current=current.nextnode;
			ithNode++;
		}
		temp=current.nextnode;
		current.nextnode=dNode;
		dNode.nextnode=temp;
		temp.previousnode=dNode;
		dNode.previousnode=current;
		
	}
	public void deleteNode(int nodeNumber){
		int ithNode = 1;
		current= root;
		if (nodeNumber==1){
			root=current.nextnode;
			current.nextnode=null;
			current.previousnode=null;
		}else{
			while(ithNode!=nodeNumber){
				current=current.nextnode;
				ithNode++;
			}
			if(current.nextnode==null){
				current.previousnode.nextnode=null;
				current.previousnode=null;
			}else{
				current.previousnode.nextnode=current.nextnode;
				current.nextnode.previousnode=current.previousnode;
			}
		}
		
	}
	public void destory(){
		root=null;
	}
	public void find(String data){
		current=root;
		int ithNode=1;
		while(current.data!=data){
			current=current.nextnode;
			ithNode++;
		}
		System.out.println(ithNode);
	}
	public void print(){
		current=root;
		while(current!=null){
			System.out.println(current.data);
			current=current.nextnode;
		}
	}
	public void printback(){
		current=root;
		while(current.nextnode!=null){
			current=current.nextnode;
		}
		while(current!=null){
			System.out.println(current.data);
			current=current.previousnode;
		}
	}
