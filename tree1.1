package trees;

public class BST {
	static Node root;
	public void insert(int data)
    {
       if(root!=null){
           insert(root, data);
       }
       else{
           root = new Node(data);
           System.out.println("Building tree with root data " +data);
       }
    }

    private void insert(Node node, int data)
    {
       if (data <= node.getData()) {
           if (node.left != null) {
                  insert(node.left, data);
           } else {
               System.out.println("++Inserted " + data + " to left of "
               + node.getData());
               node.left = new Node(data);
           }
       } else if (data > node.getData()) {
           if (node.right != null) {
               insert(node.right, data);
           } else {
               System.out.println("--Inserted " + data + " to right of "
               + node.getData());
               node.right = new Node(data);
           }
       }
    }
    public Node find(int data){
    	if(root!=null){
    		return findNode(root, new Node(data));
    	}
    	return null;
    }
    private Node findNode(Node search,Node node){
    	if (search==null){
    		return null;
    	}
    	if (search.data==node.data){
    		return search;
    	}else{
    		Node returnNode=findNode(search.left,node);
    		if (returnNode ==null){
    			returnNode=findNode(search.right,node);
    		}
    		return returnNode;
    	}
    }
    public boolean delete(int id){
		Node parent = root;
		Node current = root;
		boolean isLeftChild = false;
		while(current.data!=id){
			parent = current;
			if(current.data>id){
				isLeftChild = true;
				current = current.left;
			}else{
				isLeftChild = false;
				current = current.right;
			}
			if(current ==null){
				return false;
			}
		}
		//Case 1: the node to be deleted has no children
		if(current.left==null && current.right==null){
			if(current==root){
				root = null;
			}
			if(isLeftChild ==true){
				parent.left = null;
			}else{
				parent.right = null;
			}
		}
		//Case 2: the node to be deleted has only one child
		else if(current.right==null){
			if(current==root){
				root = current.left;
			}else if(isLeftChild){
				parent.left = current.left;
			}else{
				parent.right = current.left;
			}
		}
		else if(current.left==null){
			if(current==root){
				root = current.right;
			}else if(isLeftChild){
				parent.left = current.right;
			}else{
				parent.right = current.right;
			}
		//Case 3: the node to be deleted has two child
		}else if(current.left!=null && current.right!=null){
			Node successor	 = getSuccessor(current);
			if(current==root){
				root = successor;
			}else if(isLeftChild){
				parent.left = successor;
			}else{
				parent.right = successor;
			}			
			successor.left = current.left;
		}		
		return true;		
	}
	
	public Node getSuccessor(Node deleleNode){
		Node successsor =null;
		Node successsorParent =null;
		Node current = deleleNode.right;
		while(current!=null){
			successsorParent = successsor;
			successsor = current;
			current = current.left;
		}
		//check if successor has the right child, it cannot have left child for sure
		// if it does have the right child, add it to the left of successorParent.
		if(successsor!=deleleNode.right){
			successsorParent.left = successsor.right;
			successsor.right = deleleNode.right;
		}
		return successsor;
	}
	public void inorder()
    {
        inorder(root);
    }
   
    private void inorder(Node r)
    {
        if (r != null)
        {
            inorder(r.getLeft());
            System.out.print(r.getData() +" ");
            inorder(r.getRight());
        }
    }
	public static void main(String arg[]){
		BST b = new BST();
		b.insert(1);
		b.insert(8);
		b.insert(6);
		b.insert(3);
		b.insert(9);
		b.insert(11);
		b.insert(16);
		b.inorder();
		System.out.println();
		b.delete(16);
		b.inorder();
		System.out.println();
		b.delete(8);
		b.inorder();
		System.out.println();
	}

}
